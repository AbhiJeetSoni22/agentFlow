

import { Socket } from 'socket.io';
import { ReActAgent } from '../reactAgent';
import { ToolExecutor } from '../toolExecuter';
import { Log } from '../../models/Log';
import { v4 as uuidv4 } from 'uuid';
import { saveMessage } from '../../controllers';
import { ACCOUNT_TYPE } from '../../constants';
import { SocketEntity } from '../../entity/socket.entity';

// Yeh class ReAct Agent se sambandhit logic ko manage karegi
export class ReactAgentService {
Â  Â  private agentInstances: Map<string, ReActAgent> = new Map();
Â  Â  private executorInstances: Map<string, ToolExecutor> = new Map();
Â  Â  private confirmationAwaiting: Map<string, (response: string) => void>;

Â  Â  // Constructor mein confirmationAwaiting map ko receive karein
Â  Â  constructor(confirmationAwaiting: Map<string, (response: string) => void>) {
Â  Â  Â  Â  this.confirmationAwaiting = confirmationAwaiting;
Â  Â  }

Â  Â  public async runReActAgent(
Â  Â  Â  Â  chatMessage: any,
Â  Â  Â  Â  socket: Socket,
Â  Â  Â  Â  companyId: string,
Â  Â  Â  Â  agentId: string,
Â  Â  Â  Â  agentFlowId?: string // Yeh hardcoded flow ID ho sakta hai
Â  Â  ) {
Â  Â  Â  Â  try {

Â  Â  Â  Â  Â  Â let agent = this.agentInstances.get(companyId);
Â  Â  Â  Â  Â  Â  let toolExecutor = this.executorInstances.get(companyId);
Â  Â  
Â  Â  Â  Â  Â  Â  if (!agent || !toolExecutor) {
Â  Â  Â  Â  Â  Â  Â  Â  console.log(`[ReAct] Initializing new Agent and Executor for Company ID: ${companyId}`);
Â  Â  Â  Â  Â  Â  Â  Â  socket.emit("receiveMessageToUser", {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  message: "Initializing agent...",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  sender: chatMessage.receiver,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  receiver: chatMessage.sender,
Â  Â  Â  Â  Â  Â  Â  Â  });
                
                // ðŸ”¥ START: NEW LOGIC FOR PASSING HARDCODED IDs
                // hardCodedAgentId: Agar agentFlowId mila hai, toh agentId ko hardcodedAgentId manenge, varna undefined.
                // hardCoadedFlowId: agentFlowId ko pass kiya jayega.
                console.log('company id ',companyId);
                console.log('agentId is',agentId);
                console.log('agentFlowId',agentFlowId)
                
Â  Â  Â  Â  Â  Â  Â  Â  agent = await ReActAgent.create(companyId); // Updated create call
Â  Â  Â  Â  Â  Â  Â  Â  toolExecutor = await ToolExecutor.create(companyId);
                // ðŸ”¥ END: NEW LOGIC FOR PASSING HARDCODED IDs
                
Â  Â  Â  Â  Â  Â  Â  Â  this.agentInstances.set(companyId, agent);
Â  Â  Â  Â  Â  Â  Â  Â  this.executorInstances.set(companyId, toolExecutor);
Â  Â  Â  Â  Â  Â  Â  Â  socket.emit("receiveMessageToUser", {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  message: "Agent Is Ready",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  sender: chatMessage.receiver,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  receiver: chatMessage.sender,
Â  Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  const askUser = (question: string): Promise<string> => {
Â  Â  Â  Â  Â  Â  Â  Â  return new Promise(async (resolve) => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  await saveMessage(
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  question,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  chatMessage.receiver,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  chatMessage.sender,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  companyId,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ACCOUNT_TYPE.LIVE_CHAT,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "AGENT",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  agentId
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  socket.emit("receiveMessageToUser", {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  message: question,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  sender: chatMessage.receiver,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  receiver: chatMessage.sender,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  this.confirmationAwaiting.set(socket.id, resolve);
Â  Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  };

Â  Â  Â  Â  Â  Â  const endUserId = chatMessage.sender;
Â  Â  Â  Â  Â  Â  const sessionId = uuidv4();
Â  Â  Â  Â  Â  Â  const agentLog = new Log({
Â  Â  Â  Â  Â  Â  Â  Â  companyId,
Â  Â  Â  Â  Â  Â  Â  Â  agentId,
Â  Â  Â  Â  Â  Â  Â  Â  endUserId,
Â  Â  Â  Â  Â  Â  Â  Â  sessionId,
Â  Â  Â  Â  Â  Â  Â  Â  initialQuery: chatMessage.message,
Â  Â  Â  Â  Â  Â  Â  Â  status: "RUNNING",
Â  Â  Â  Â  Â  Â  Â  Â  logType: "REACT_AGENT",
Â  Â  Â  Â  Â  Â  Â  Â  steps: [{
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  stepNumber: 1,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type: "QUERY",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  content: `User initiated with query: "${chatMessage.message}"`,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  timestamp: new Date(),
Â  Â  Â  Â  Â  Â  Â  Â  }],
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  await agentLog.save();
Â  Â  Â  Â  Â  Â  console.log('sending react message ',chatMessage.message)
Â  Â  Â  Â  Â  Â  await agent.run(
Â  Â  Â  Â  Â  Â  Â  Â  chatMessage.message,
Â  Â  Â  Â  Â  Â  Â  Â  toolExecutor,
Â  Â  Â  Â  Â  Â  Â  Â  socket,
Â  Â  Â  Â  Â  Â  Â  Â  askUser,
Â  Â  Â  Â  Â  Â  Â  Â  companyId,
Â  Â  Â  Â  Â  Â  Â  Â  agentId,
Â  Â  Â  Â  Â  Â  Â  Â  endUserId,
Â  Â  Â  Â  Â  Â  Â  Â  sessionId,
Â  Â  Â  Â  Â  Â  Â  Â  chatMessage.sender,
Â  Â  Â  Â  Â  Â  Â  Â  chatMessage.receiver
Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  return 'complete'
Â  Â  Â  Â  } catch (error: any) {
Â  Â  Â  Â  Â  Â  console.error("[ReAct] A critical error occurred in the agent flow:", error);
Â  Â  Â  Â  Â  Â  socket.emit("receiveMessageToUser", {
Â  Â  Â  Â  Â  Â  Â  Â  message: `An unexpected error occurred: ${error.message}`,
Â  Â  Â  Â  Â  Â  Â  Â  sender: chatMessage.receiver,
Â  Â  Â  Â  Â  Â  Â  Â  receiver: chatMessage.sender,
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  }
Â  Â  }
}
        this.executorInstances.set(companyId, toolExecutor);
        socket.emit("receiveMessageToUser", {
          message: "Agent Is Ready",
          sender: chatMessage.receiver,
          receiver: chatMessage.sender,
        });
      }
      const askUser = (question: string): Promise<string> => {
        return new Promise(async (resolve) => {
          await saveMessage(
            question,
            chatMessage.receiver,
            chatMessage.sender,
            companyId,
            ACCOUNT_TYPE.LIVE_CHAT,
            "BOT",
            botId
          );
          socket.emit("receiveMessageToUser", {
            message: question,
            sender: chatMessage.receiver,
            receiver: chatMessage.sender,
          });
          this.confirmationAwaiting.set(socket.id, resolve);
        });
      };
      const endUserId = chatMessage.sender;
      const sessionId = uuidv4();
      const agentLog = new Log({
        companyId,
        botId,
        endUserId,
        sessionId,
        initialQuery: chatMessage.message,
        status: "RUNNING",
        logType: "REACT_AGENT",
        steps: [
          {
            stepNumber: 1,
            type: "QUERY",
            content: `User initiated with query: "${chatMessage.message}"`,
            timestamp: new Date(),
          },
        ],
      });
      await agentLog.save();
      await agent.run(
        chatMessage.message,
        toolExecutor,
        socket,
        askUser,
        companyId,
        botId,
        endUserId,
        sessionId,
        chatMessage.sender,
        chatMessage.receiver
      );
    } catch (error: any) {
      console.error(
        "[ReAct] A critical error occurred in the agent flow:",
        error
      );
      socket.emit("receiveMessageToUser", {
        message: `An unexpected error occurred: ${error.message}`,
        sender: chatMessage.receiver,
        receiver: chatMessage.sender,
      });
    }
  }
}
